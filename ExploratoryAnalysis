{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "52a05560",
   "metadata": {
    "papermill": {
     "duration": 0.004386,
     "end_time": "2024-08-10T08:32:51.524697",
     "exception": false,
     "start_time": "2024-08-10T08:32:51.520311",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# PEI Group Interview Project\n",
    "\n",
    "## Data Analyst Task\n",
    "\n",
    "### The sales team has the following data from various sources:\n",
    "* Customers.xls - [https://easyupload.io/t9m9my]\n",
    "* Orders.csv - [https://easyupload.io/pngfna]\n",
    "* Shippings.json - [https://easyupload.io/fm8t5t]\n",
    "\n",
    "\n",
    "### Objectives: The team is trying to generate the reports for the below requirements:\n",
    "\n",
    "* the total amount spent and the country for the Pending delivery status for each country.\n",
    "* the total number of transactions, total quantity sold, and total amount spent for each customer, along with the product details.\n",
    "* the maximum product purchased for each country.\n",
    "* the most purchased product based on the age category less than 30 and above 30.\n",
    "* the country that had minimum transactions and sales amount.\n",
    "\n",
    "\n",
    "### Quality Checks: As a Data Analyst, you are required to\n",
    "\n",
    "* Verify the accuracy, completeness, and reliability of source data. \n",
    "* Based on your findings, define and outline the requirements for anticipated datasets, detailing the necessary data components.\n",
    "* Develop the data models to effectively organise and structure the information and provide a detailed mapping of existing data flows, focussing on the areas of concern.\n",
    "* Prepare a story with technical specifications for one part of the data model for a data engineer.\n",
    "* Communicate the findings and insights to stakeholders in a visually comprehensive manner.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "32588eb5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T08:32:51.535426Z",
     "iopub.status.busy": "2024-08-10T08:32:51.534082Z",
     "iopub.status.idle": "2024-08-10T08:33:08.658018Z",
     "shell.execute_reply": "2024-08-10T08:33:08.656433Z"
    },
    "papermill": {
     "duration": 17.132267,
     "end_time": "2024-08-10T08:33:08.660979",
     "exception": false,
     "start_time": "2024-08-10T08:32:51.528712",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting xlrd\r\n",
      "  Downloading xlrd-2.0.1-py2.py3-none-any.whl.metadata (3.4 kB)\r\n",
      "Downloading xlrd-2.0.1-py2.py3-none-any.whl (96 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m96.5/96.5 kB\u001b[0m \u001b[31m2.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: xlrd\r\n",
      "Successfully installed xlrd-2.0.1\r\n"
     ]
    }
   ],
   "source": [
    "# Additional packages required that are not part of the default docker image.\n",
    "\n",
    "# Required to import xls files in pandas\n",
    "!pip install xlrd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "51eeed90",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-08-10T08:33:08.671538Z",
     "iopub.status.busy": "2024-08-10T08:33:08.671100Z",
     "iopub.status.idle": "2024-08-10T08:33:09.707710Z",
     "shell.execute_reply": "2024-08-10T08:33:09.706387Z"
    },
    "papermill": {
     "duration": 1.045691,
     "end_time": "2024-08-10T08:33:09.710931",
     "exception": false,
     "start_time": "2024-08-10T08:33:08.665240",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/pei-group/Order.csv\n",
      "/kaggle/input/pei-group/Customer.xls\n",
      "/kaggle/input/pei-group/Shipping.json\n"
     ]
    }
   ],
   "source": [
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7202fd9",
   "metadata": {
    "papermill": {
     "duration": 0.004041,
     "end_time": "2024-08-10T08:33:09.719526",
     "exception": false,
     "start_time": "2024-08-10T08:33:09.715485",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1. Exploratory Data Analysis\n",
    "\n",
    "### Understanding Data\n",
    "\n",
    "[Data Understanding.pdf]() contains the following information:\n",
    "* Data Dictionary (table schemas, available columns, column descriptions and assumed data types)\n",
    "* Assumed constraints\n",
    "* Business Process Diagram\n",
    "* Data Flow Diagram\n",
    "\n",
    "### Importing Data\n",
    "We will import data from multiple sources into our analysis environment using pandas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "65a79e6b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T08:33:09.730796Z",
     "iopub.status.busy": "2024-08-10T08:33:09.730085Z",
     "iopub.status.idle": "2024-08-10T08:33:09.814725Z",
     "shell.execute_reply": "2024-08-10T08:33:09.813302Z"
    },
    "papermill": {
     "duration": 0.093916,
     "end_time": "2024-08-10T08:33:09.817836",
     "exception": false,
     "start_time": "2024-08-10T08:33:09.723920",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "customers = pd.read_excel('/kaggle/input/pei-group/Customer.xls', sheet_name=0)\n",
    "orders = pd.read_csv('/kaggle/input/pei-group/Order.csv')\n",
    "shipping = pd.read_json('/kaggle/input/pei-group/Shipping.json')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f40acef3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T08:33:09.829524Z",
     "iopub.status.busy": "2024-08-10T08:33:09.829079Z",
     "iopub.status.idle": "2024-08-10T08:33:09.845729Z",
     "shell.execute_reply": "2024-08-10T08:33:09.844387Z"
    },
    "papermill": {
     "duration": 0.026715,
     "end_time": "2024-08-10T08:33:09.849099",
     "exception": false,
     "start_time": "2024-08-10T08:33:09.822384",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Customer_ID    First     Last  Age Country\n",
      "0            1   Joseph     Rice   43     USA\n",
      "1            2     Gary    Moore   71     USA\n",
      "2            3     John   Walker   44      UK\n",
      "3            4     Eric   Carter   38      UK\n",
      "4            5  William  Jackson   58     UAE\n",
      "\n",
      "   Order_ID      Item  Amount  Customer_ID\n",
      "0         1  Keyboard     400          139\n",
      "1         2     Mouse     300          250\n",
      "2         3   Monitor   12000          239\n",
      "3         4  Keyboard     400          153\n",
      "4         5  Mousepad     250          153\n",
      "\n",
      "   Shipping_ID     Status  Customer_ID\n",
      "0            1    Pending          173\n",
      "1            2    Pending          155\n",
      "2            3  Delivered          242\n",
      "3            4    Pending          223\n",
      "4            5  Delivered           72\n"
     ]
    }
   ],
   "source": [
    "# Let's check if all dataframes have been created successfully\n",
    "print(customers.head(), orders.head(), shipping.head(), sep='\\n\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9c7144e",
   "metadata": {
    "papermill": {
     "duration": 0.004374,
     "end_time": "2024-08-10T08:33:09.857980",
     "exception": false,
     "start_time": "2024-08-10T08:33:09.853606",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Result**: The schemas are matching with the data present in the files.\n",
    "\n",
    "### Data Validation\n",
    "\n",
    "* Check for missing values.\n",
    "* Check for duplicates.\n",
    "* Check that the data-types have been assigned correctly.\n",
    "* Check that the data fulfills assumed constraints."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0b314c0",
   "metadata": {
    "papermill": {
     "duration": 0.004409,
     "end_time": "2024-08-10T08:33:09.867097",
     "exception": false,
     "start_time": "2024-08-10T08:33:09.862688",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5523012,
     "sourceId": 9144230,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 22.106894,
   "end_time": "2024-08-10T08:33:10.394764",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-10T08:32:48.287870",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
